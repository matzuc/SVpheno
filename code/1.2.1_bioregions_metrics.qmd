---
title: "cluster visualization"
format: html
warning: false
message: false
# html standalone
standalone: true
editor: 
  markdown: 
    wrap: 72
    
---

## libraries

load a few libraries

```{r}
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(ggthemes)
library(sf)
library(ggspatial)
library(viridis)
library(raster)
library(stringr)

library(factoextra)

library(ggOceanMaps)
library(grafify)
library(data.table)
library(Rcpp)
```


```{r}
library(tinytable)

options(digits = 3) # how many significant digits to print by default
options("tinytable_tabularray_placement" = "H") # for LaTeX
```

Load the time series from script 1.2.0


# Time series

```{r}
dat <- read.csv( here::here("out", "1.2.0_bioregions_chla_time_series.csv"))

```



```{r}
tt(data.frame(table(dat$bioregion, dat$year)))
```



function for computing the metrics
modified to compute the amplitude of the second bloom

```{r}
blooms_dt <- function(subs) {
# Assicurati che 'subs' sia un data.table
setDT(subs)
subs2 <- copy(subs)  # Crea una copia se non vuoi modificare 'subs' originali
#subs2[, year := 2014]  # Aggiungi la colonna 'year'

# Ordinamento e creazione iniziale di 'above_threshold'
es2 <- subs2[, .SD[order(doy)], by = .(x, y, year)]
es2 <- es2[, thr := median(CHL, na.rm = TRUE) * 1.05, by = .(x, y, year)]
es2[, above_threshold := fifelse(!is.na(CHL) & CHL > thr, 1L, 0L), by = .(x, y, year)]
# 

# Calcola 'group' usando rleid e esegui le operazioni di filtraggio e riassunto
es2[, group2 := rleid(above_threshold), by = .(x, y, year)]


es2[, group_length := .N, by = .(x, y, year, group2)]


check_groups <- es2[, .(above_threshold = min(above_threshold),
												length = min(group_length)), by = .(x, y, year, group2)]



# attenzione: qui unisco gruppi con buchi sotto soglia di lunghezza <= 3
#identifico i gruppi da unire
check_groups[, to_merge := fifelse(above_threshold == 0 & length <= 3 &
                          shift(above_threshold, type = "lag") == 1 &
                          shift(above_threshold, type = "lead") == 1, 1L, 0L),
    by = .(x, y, year)]

check_groups[, above_corrected := fifelse(to_merge == 1, 1L, above_threshold),]
check_groups[, group3 := rleid(above_corrected ), by = .(x, y, year)]
# remove columns 6:7
check_groups[, c("above_threshold", "length", "to_merge") := NULL]


# merge to es2 (left join)
es2 <- merge(es2, check_groups, by = c("x", "y", "year", "group2"), allow.cartesian=TRUE)

# ricalcolo il numero di giorni per ogni gruppo
es2[, group_length := .N, by = .(x, y, year, group3)]

# Filtrare i gruppi in base alle condizioni
filtered_groups <- es2[above_corrected == 1 & group_length >= 15]


# filtro i gruppi above_threshold, lunghi almeno 14 giorni
es_filtered <- filtered_groups[, .(
  start_doy = min(doy),
  end_doy = max(doy),
  mx = max(CHL, na.rm = TRUE),
  day_mx = doy[which.max(CHL)],
  
  BArea = integrate_numeric(x = doy, y = CHL)
), by = .(year, x, y, group3)]


es_filtered[, peak_id := rleid(group3), by = .(x, y, year)]


es3 <- merge(es2, es_filtered, by = c("x", "y", "year", "group3"))

es3[, CHLmean := mean(CHL, na.rm = TRUE), by = .(x, y, year)]
es3[, Barea_total := integrate_numeric(x = doy, y = CHL), by = .(x, y, year)]


peaks <- es3[, .(
	start_doy = min(start_doy, na.rm = TRUE),
	end_doy = max(end_doy, na.rm = TRUE),
	
  mx = min(mx, na.rm = TRUE),
  day_mx = min(day_mx, na.rm = TRUE),
  BArea = max(BArea, na.rm = TRUE),
  Barea_total = max(Barea_total, na.rm = TRUE),
  CHLmean = min(CHLmean, na.rm = TRUE),
	thr = min(thr, na.rm = TRUE)
), by = .(x, y, year, peak_id)]



setorder(peaks, x, y, year, -mx)


peaks_summary <- peaks[, .(
  start_doy = start_doy[1], 
  end_doy = end_doy[1], 
  mx = mx[1], 
  day_mx = day_mx[1], 
  BArea = BArea[1], 
  CHLmean = CHLmean[1], 
  thr = mean(thr),
  BArea_total = Barea_total[1],
  Bloom_Frequency = .N,
  Max_Diff = as.double(if (.N > 1) mx[1] - mx[2] else NA_real_),
  Day_Diff = as.double(if (.N > 1) day_mx[2] - day_mx[1] else NA_real_),
  Day_Start_First = start_doy[which.min(start_doy)],
  Day_End_First = end_doy[which.min(start_doy)],
  Second_Peak_Amplitude = as.double(if (.N > 1) mx[2] - thr else 0)  # Aggiunta della nuova metrica
), by = .(x, y, year)]



# calcolo alcune metriche che mancano
peaks_summary[, amplitude := mx - thr, ]


es2[, days_in_group := .N, by = .(x, y, year)]

# Filtrare per tenere solo gli ultimi 15 giorni di ogni gruppo
es2_filtered <- es2[days_in_group > (days_in_group - 35)]

# Calcolare la media della clorofilla per questi giorni
es2_means <- es2_filtered[, .(CHL_mean_last_35 = mean(CHL, na.rm = TRUE)), by = .(x, y, year)]




peaks_summary <- merge(peaks_summary, es2_means, by = c("x", "y", "year"))

#Max_Diff Day_Diff set to 0 if NA
peaks_summary[is.na(Max_Diff), Max_Diff := 0]
peaks_summary[is.na(Day_Diff), Day_Diff := 0]

    # Restituire il risultato finale
    return(peaks_summary)
}
```



```{r}

cppFunction('
double integrate_numeric(NumericVector x, NumericVector y) {
  int n = y.size();

  if (n % 2 == 0) {
    // Trapezoidal rule for even number of points
    double sum = 0.0;
    for(int i = 0; i < n - 1; i++) {
      double h = x[i + 1] - x[i];
      sum += h * (y[i] + y[i + 1]) / 2;
    }
    return sum;
  } else {
    // Simpson s rule for odd number of points
    double h = (max(x) - min(x)) / (n - 1);
    double sum1 = 0.0;
    double sum2 = 0.0;
    for(int i = 1; i < n - 1; i += 2) {
      sum1 += y[i];
    }
    for(int i = 2; i < n - 2; i += 2) {
      sum2 += y[i];
    }
    return h / 3 * (y[0] + y[n - 1] + 4 * sum1 + 2 * sum2);
  }
}
')
```

```{r}

df_l <- dat |> 
	rename(CHL = ave) |> 
	mutate(x = bioregion, y = bioregion)

system.time({
  resDT <- blooms_dt(df_l)
})


write.csv(resDT[-1, ], here::here("data", "1.2.1_chl_metrics.csv"), row.names = FALSE)

```







```{r}
resDT <- resDT[-1,]
resPL <- resDT |> mutate(bioregion = x)
sec <- resDT |> 
	filter(Bloom_Frequency >1) |>
	mutate(doy2 = day_mx + Day_Diff,
				 mx = mx - Max_Diff,
				 bioregion = x)

out4 <- dat |> 
	group_by(year, bioregion) |>
	mutate(thr = median(ave, na.rm = T) * 1.05) |> 
	filter(!is.na(year))
	
ggplot(out4, aes(doy, ave, colour = bioregion)) +
	geom_line()  +
	
	facet_grid(bioregion ~ year, scale = "free_y") +
	theme_few() +
	geom_hline(data = resPL, aes(yintercept = thr, colour = bioregion), linetype = "dotted") +

	scale_fill_grafify(palette = "kelly") +
	# remove legend
	theme(legend.position = "none") +
	xlab("Day of the year") +
	ylab("Chlorophyll-a concentration (mg/m3)") +

		scale_colour_grafify(palette = "kelly") +
	geom_point(data = resPL, aes(x = day_mx, y = mx), colour = "red", size = 2) +
	geom_vline(data = resPL, aes(xintercept = day_mx),  size = 0.3, alpha = 0.3) +
	geom_point(data = sec, aes(x = doy2, y = mx), col = "green") +
	geom_ribbon(aes(ymin = ifelse(ave > thr, thr, NA), ymax = ave), fill = "grey30", alpha = 0.5) +
	geom_segment(data = resPL, aes(x = start_doy, xend = end_doy, y = thr, yend = thr), colour = "red", size = 1) 

	
ggsave(here::here("out", paste0("1.2.1_timeseriesCHL_withmetrics.png")), width = 24, height = 18, dpi = 300, bg = "white")


	
```



```{r}
res_long <- 
	resPL |> 
	pivot_longer(cols = c(4:18))


ggplot(res_long, aes(year, value, colour = bioregion)) +
	geom_point()  +
	geom_line(alpha = 0.5) +
	facet_grid( name~ bioregion, scale = "free_y") +
	theme_few() +
	
	
	
	scale_fill_grafify(palette = "kelly") +
	# remove legend
	theme(legend.position = "bottom") +
	xlab("Day of the year") +
	ylab("Chlorophyll-a concentration (mg/m3)") +

	scale_colour_grafify(palette = "kelly") +
	# facet labs horizantal
	theme(strip.text.y = element_text(angle = 0, hjust = 0.5)) 

	
ggsave(here::here("out", paste0("1.2.1_metrics_amplitude.png")), width = 18, height = 12, dpi = 300, bg = "white")



```



```{r}
ggplot(res_long |> filter(name == "Second_Peak_Amplitude"| name == "amplitude"), aes(year, value, colour = bioregion)) +
	geom_point()  +
	#geom_line(alpha = 0.5) +
	facet_grid( name~ ., scale = "free_y") +
	theme_few() +
	
	
	
	scale_fill_grafify(palette = "kelly") +
	# remove legend
	theme(legend.position = "bottom") +
	xlab("Day of the year") +
	ylab("Chlorophyll-a concentration (mg/m3)") +

	scale_colour_grafify(palette = "kelly") +
	# facet labs horizantal
	theme(strip.text.y = element_text(angle = 0, hjust = 0.5)) +
	geom_smooth(method = "lm", colour = "black", size = 0.5) 

	
ggsave(here::here("out", paste0("1.2.1_aplitude_overall.png")), width = 18, height = 7, dpi = 300, bg = "white")


```

